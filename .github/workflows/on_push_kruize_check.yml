name: CI Pipeline for Kruize

# Triggers the workflow on push or pull request to the mvp_demo branch
on:
  push:
    branches: [mvp_demo]
  pull_request:
    branches: [mvp_demo]

# Define the jobs to run as part of this workflow

jobs:
  deploy_kruize:
    runs-on: ubuntu-20.04

    steps:
      # Step 2: Checkout the additional repository (kruize/autotune)
      - name: Checkout kruize/autotune repository
        uses: actions/checkout@v3
        with:
          repository: kruize/autotune
          ref: mvp_demo
          path: autotune-repo

      # Setup Minikube
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
      - name: Set Root Directory
        run: |
          echo "Setting ROOT_DIR to autotune-repo"
          echo "ROOT_DIR=autotune-repo" >> $GITHUB_ENV

      - name: Build crc
        run: |
          echo Build crc

          ./autotune-repo/build.sh 
          docker images | grep autotune

      - name: Check cluster info on minikube
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
      - name: Install Prometheus on minikube
        run: |
          echo Install Prometheus on minikube
          cd scripts
          ./prometheus_on_minikube.sh -as

      - name: Deploy Kruize in crc mode
        run: |
          echo Deploy kruize in crc mode
          echo "***************************************************************"
          cp ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml.old
          sed -e "s/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g" ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml.old > ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml
          cat ./manifests/crc/default-db-included-installation/minikube/kruize-crc-minikube.yaml
          cd tests
          echo "PR_NUMBER = ${{ env.pr_number }}"
          ./test_autotune.sh -c minikube -i autotune_operator:pr_${{ env.pr_number }} --testsuite=remote_monitoring_tests --testcase=test_e2e --resultsdir=${GITHUB_WORKSPACE}
      - name: Capture ffdc logs
        if: always()
        run: |
          echo "Capturing ffdc logs"
          ./scripts/ffdc.sh -m crc -d ${GITHUB_WORKSPACE}/kruize_test_results
      - name: Archive results
        if: always()
        run: |
          cd ${GITHUB_WORKSPACE}
          tar cvf crc_results.tar kruize_test_results

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: crc-results
          path: ./crc_results.tar
          retention-days: 2
